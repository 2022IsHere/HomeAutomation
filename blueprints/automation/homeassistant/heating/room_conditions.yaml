# Name: room_conditions.yaml
# Author: Sebastian Sopola @ https://www.linkedin.com/in/sebastiansopola/
# Description: This file containts the blueprint to provide logic to evaluate room conditions



blueprint:
  name: Evaluate room conditions
  description: Evaluate room conditions. Output will be true to one of the options; heating_required, no_heating or withing_range
  domain: automation
  author: Sebastian Sopola @ https://www.linkedin.com/in/sebastiansopola/
  input:
    room_conditions:
      name: Provide room_temperature, min_temperature and max_temperature
      icon: mdi:magnify
      description: These inputs allow to evaluate room conditions
      input:  
        room_temperature:
          name: Input sensor room temperature 
          selector: # declare rules of this input
            entity: # input must be entity in home assistant
              filter: # filter to allow only types described below
                domain: sensor  
        min_temperature:
          name: Input number min temperature
          selector:
            entity:
              filter:
                domain: input_number
        max_temperature:
          name: Input number max temperature
          selector:
            entity:
              filter:
                domain: input_number
    pipeline_settings: # Create pipeline section for input booleans
      name: Provide input booleans representing blocks' states
      icon: mdi:magnify
      description: These inputs represent program flow
      input:
        pipeline:
          name: Input sensor pipeline
          selector: 
            entity: 
              filter:
                domain: sensor
        block_0:
          name: Block 0 state
          selector:
            entity:
              domain: input_boolean
        block_1:
          name: Block 1 state
          selector:
            entity:
              domain: input_boolean
        block_2_case_1:
          name: Block 2 Case 1 state
          selector:
            entity:
              domain: input_boolean
        block_2_case_2:
          name: Block 2 Case 2 state
          selector:
            entity:
              domain: input_boolean
        block_2_case_3:
          name: Block 2 Case 3 state
          selector:
            entity:
              domain: input_boolean
        block_3:
          name: Block 3 state
          selector:
            entity:
              domain: input_boolean
        block_4:
          name: Block 4 state
          selector:
            entity:
              domain: input_boolean

mode: restart
max_exceeded: silent

trigger_variables:
  room_temperature: !input room_temperature
  min_temperature: !input min_temperature
  max_temperature: !input max_temperature
  pipeline: !input pipeline
  block_0: !input block_0
  block_1: !input block_1
  block_2_case_1: !input block_2_case_1
  block_2_case_2: !input block_2_case_2
  block_2_case_3: !input block_2_case_3
  block_3: !input block_3
  block_4: !input block_4

trigger:
  - platform: template
    value_template: >
      {% set pipeline_JSON = states(pipeline) %}
      {% if pipeline_JSON not in ['unknown', 'undefined', '', None] %}
        {{ (pipeline_JSON | from_json)['Block 1'] == 'on' }}
      {% else %}
        false
      {% endif %}
    id: pipeline_ID



action:

  # Debug: Check entities' values
  #- service: system_log.write
  #  data:
  #    message: >
  #      Room temperature: {{ states(room_temperature) }}, 
  #      Min temperature: {{ states(min_temperature) }}, 
  #      Max temperature: {{ states(max_temperature) }}, 
  #      Pipeline: {{ states(pipeline) }},
  #      Input boolean states:
  #      Block 0: {{ states(block_0) }},
  #      Block 1: {{ states(block_1) }},
  #      Block 2 Case 1: {{ states(block_2_case_1) }},
  #      Block 2 Case 2: {{ states(block_2_case_2) }},
  #      Block 2 Case 3: {{ states(block_2_case_3) }},
  #      Block 3: {{ states(block_3) }}, 
  #      Block 4: {{ states(block_4) }}

  # Init 
  - service: input_boolean.turn_off
    target:
      entity_id:
        - !input block_2_case_1 
        - !input block_2_case_2 
        - !input block_2_case_3 
        - !input block_3
        - !input block_4
      

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ states(room_temperature) >= states(max_temperature) }}"
        sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: !input block_2_case_1
      - conditions:
          - condition: template
            value_template: "{{ states(room_temperature) <= states(min_temperature) }}"
        sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: !input block_2_case_2
      - conditions:
          - condition: template
            value_template: "{{ states(room_temperature) < states(max_temperature) and states(room_temperature) > states(min_temperature) }}"
        sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: !input block_2_case_3

  # Debug: provide updated JSON 
  #- service: system_log.write
  #  data:
  #    message: >
  #      {% set pipeline_JSON = states(pipeline) %}
  #      {% if pipeline_JSON not in ['unknown', 'undefined', '', None] %}
  #        {% set parsed_json = pipeline_JSON | from_json %}
  #        Updated pipeline: {{ parsed_json }} Block 1: {{ parsed_json['Block 1'] == 'on' }}
  #      {% else %}
  #        Updated pipeline: {{ pipeline_JSON }} Block 1: Error - JSON is not valid
  #      {% endif %}