# Name: comfort_cettings.yaml
# Author: Sebastian Sopola @ https://www.linkedin.com/in/sebastiansopola/
# Description: This file containts the blueprint to control comfort settings in UI. Enforcing rules utilizing blueprint Control comfort settings.



blueprint:
  name: Control comfort settings
  description:  Control room's comfort settings. Enforce rules upon comfort settings.
  domain: automation
  author: Sebastian Sopola @ https://www.linkedin.com/in/sebastiansopola/
  input:
    comfort_settings: # Create input section to make input groups
      name: Provide min, max and target tmp
      icon: mdi:controller-classic
      description: These inputs control the comfort settings for specific room in the heating system
      input:
        min_temperature:
          name: Input number min temperature
          selector: # declare rules of this input
            entity: # input must be entity in home assistant
              filter: # filter to allow only types described below
                domain: input_number  # entity type of this entity
        max_temperature:
          name:  Input number max temperature
          selector:
            entity:
              filter:
                domain: input_number
        target_temperature:
          name: Input number target temperature
          selector:
            entity:
              filter:
                domain: input_number

mode: restart
max_exceeded: silent

trigger_variables:
  min_temperature: !input min_temperature
  max_temperature: !input max_temperature
  target_temperature: !input target_temperature

trigger:
  - platform: state
    entity_id: !input min_temperature
    id: min_temperature_ID

  - platform: state
    entity_id: !input max_temperature
    id: max_temperature_ID

  - platform: state
    entity_id: !input target_temperature
    id: target_temperature_ID

action:
  # Debug: Check entities, entities' values
  #- service: system_log.write
  #  data:
  #    message: "Min Temperature: {{ min_temperature }}, Max Temperature: {{ max_temperature }}, Target Temperature: {{ target_temperature }}"
  #- service: system_log.write
  #  data:
  #    message: "Min Temperature: {{ states(min_temperature) }}, Max Temperature: {{ states(max_temperature) }}, Target Temperature: {{ states(target_temperature) }}" 
      
  - service: input_number.set_value
    target:
      entity_id: !input min_temperature
    data:
      value: >
        {% if states(min_temperature) | float > states(max_temperature) | float %}
          {{ states(max_temperature) }}
        {% else %}
          {{ states(min_temperature) }}
        {% endif %}

  # Force UI update for min_temperature
  - service: homeassistant.update_entity
    target:
      entity_id: !input min_temperature

  - service: input_number.set_value
    target:
      entity_id: !input max_temperature
    data:
      value: >
        {% if states(max_temperature) | float < states(min_temperature) | float %}
          {{ states(min_temperature) }}
        {% else %}
          {{ states(max_temperature) }}
        {% endif %}

  # Force UI update for max_temperature
  - service: homeassistant.update_entity
    target:
      entity_id: !input max_temperature

  - service: input_number.set_value
    target:
      entity_id: !input target_temperature
    data:
      value: >
        {% if states(target_temperature) | float < states(min_temperature) | float %}
          {{ states(min_temperature) }}
        {% elif states(target_temperature) | float > states(max_temperature) | float %}
          {{ states(max_temperature) }}
        {% else %}
          {{ states(target_temperature) }}
        {% endif %}
        
  # Force UI update for target_temperature
  - service: homeassistant.update_entity
    target:
      entity_id: !input target_temperature