# Name: electric_price_classification.yaml
# Author: Sebastian Sopola @ https://www.linkedin.com/in/sebastiansopola/
# Description: This file containts the blueprint to calculate price trend for the upcoming 8 hours and sort the hours for finance decision-making




blueprint:
  name: Price Classification, trend check, etc
  description: Collect data from the Nordpool sensor and generate a classification of electric prices for the next 8 hours.
  domain: automation
  author: Sebastian Sopola @ https://www.linkedin.com/in/sebastiansopola/
  input:
    nordpool:
      name: Nordpool Integration Sensor
      description: The sensor providing the electric stock market prices.
      selector:
        entity:
          domain: sensor
    current_year_average_price:
      name: Current year average price in electric stock market
      description: The sensor state is accurate value on current year average price in electric stock market
      selector:
        entity:
          filter:  
            domain: sensor
    price_trend:
      name: Electric stock market price trend
      icon: mdi:counter
      description: Inputs provide counters for calculating price trend
      input:
        price_trend:
          name: Electric Price Trend - Text
          description: Text entity storing the classified electric price trend for the next 8 hours
          selector:
            entity:
              domain: input_text
        above_average_counter:
          name: Increasing trend counter
          description: The counter to increment on every expensive hour
          selector:
            entity:
              domain: counter
        equal_to_average_counter:
          name: Steady trend counter
          description: The counter to increment on every average priced hour
          selector:
            entity:
              domain: counter
        below_average_counter:
          name: Decreasing trend counter
          description: The counter to increment on every cheaper hour
          selector:
            entity:
              domain: counter

trigger_variables:
  nordpool: !input nordpool
  current_year_average_price: !input current_year_average_price
  price_trend: !input price_trend
  above_average_counter: !input above_average_counter
  equal_to_average_counter: !input equal_to_average_counter
  below_average_counter: !input below_average_counter

mode: restart
max_exceeded: silent

trigger:
  - platform: time_pattern
    minutes: 0  # Trigger every hour to refresh the classification data

action:

  # reset counters
  - service: counter.reset
    target:
      entity_id:
        - !input above_average_counter
        - !input equal_to_average_counter
        - !input below_average_counter

  - service: system_log.write
    data:
      message: >
          Time now: {{ now().hour }}

  # Loop through the 8 hours and compare with the average price to determine the trend
  - repeat:
      count: 8
      sequence:
        - variables:
            hour: "{{ ((now().hour + repeat.index) % 24) }}"
            price: >              
              {% set hour_offset = (now().hour + repeat.index) %}
              {% if hour_offset < 24 %}
                {{ (state_attr(nordpool, 'today')[hour_offset]) | float }}  
              {% else %}
                {% if state_attr(nordpool, 'tomorrow_valid') %}
                  {{ (state_attr(nordpool, 'tomorrow')[hour_offset - 24]) | float }}  
                {% else %}
                  100
                {% endif %}
              {% endif %}

        - service: system_log.write
          data:
            message: >
                hour: {{ hour }}
                price: {{ price }}
        
        # Process the trend logic and update the counters based on price comparison
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ price != 100.0 }}"  # Skip invalid prices
              sequence:
                - choose:
                    - conditions:
                        - condition: template
                          value_template: "{{ price < states(current_year_average_price) | float }}"
                      sequence:
                        - service: counter.increment
                          target:
                            entity_id: !input below_average_counter

                    - conditions:
                        - condition: template
                          value_template: "{{ price > states(current_year_average_price) | float }}"
                      sequence:
                        - service: counter.increment
                          target:
                            entity_id: !input above_average_counter

                    - conditions:
                        - condition: template
                          value_template: "{{ price == states(current_year_average_price) | float }}"
                      sequence:
                        - service: counter.increment
                          target:
                            entity_id: !input equal_to_average_counter

  # After calculating the trends, update the input_text entity with the trend
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ states(above_average_counter) | float > states(below_average_counter) | float }}"
        sequence:
          - service: input_text.set_value
            target:
              entity_id: !input price_trend
            data:
              value: "increasing"
            
      - conditions:
          - condition: template
            value_template: "{{ states(below_average_counter) | float > states(above_average_counter) | float }}"
        sequence:
          - service: input_text.set_value
            target:
              entity_id: !input price_trend
            data:
              value: "decreasing"

      - conditions:
          - condition: template
            value_template: "{{ states(equal_to_average_counter) | float > 0 }}"
        sequence:
          - service: input_text.set_value
            target:
              entity_id: !input price_trend
            data:
              value: "steady"

# later add JSON with classified prices in format {"hour": type}