# Name: financial_conditions.yaml
# Author: Sebastian Sopola @ https://www.linkedin.com/in/sebastiansopola/
# Description: This file containts the blueprint to provide logic to evaluate financial conditions



blueprint:
  name: Evaluate financial conditions
  description: Evaluate financial conditions. Output will be one of the following options; delay, preheat or agressive heat 
  domain: automation
  author: Sebastian Sopola @ https://www.linkedin.com/in/sebastiansopola/
  input:
    nordpool:
      name: Provide nordpool integration
      icon: mdi:magnify
      description: These input provide information to make financial and heating strategy decisions
      input:  
        nordpool_prices:
          name: Input sensor nordpool prices 
          selector: # declare rules of this input
            entity: # niput must be entity in home assistant
              filter: # filter to allow only types described below
                domain: sensor
    room_conditions:
      name: Provide min_temperature, max_temperature and heating schedule start and end times
      icon: mdi:magnify
      description: These inputs provide information to make financial and heating strategy decisions
      input:  
        min_temperature:
          name: Input number min temperature
          selector:
            entity:
              filter:
                domain: input_number
        max_temperature:
          name: Input number max temperature
          selector:
            entity:
              filter:
                domain: input_number
        heating_start_time:
          name: Input number end time
          selector:
            entity: 
              filter:
                domain: input_datetime
        heating_end_time:
            name: Input number end time
            selector:
              entity: 
                filter:
                  domain: input_datetime
    pipeline_settings: # Create pipeline section for input booleans
      name: Provide input booleans representing blocks' states
      icon: mdi:magnify
      description: These inputs represent program flow
      input:
        pipeline:
          name: Input sensor pipeline
          selector: 
            entity: 
              filter:
                domain: sensor
        block_0:
          name: Block 0 state
          selector:
            entity:
              domain: input_boolean
        block_1:
          name: Block 1 state
          selector:
            entity:
              domain: input_boolean
        block_2_case_1:
          name: Block 2 Case 1 state
          selector:
            entity:
              domain: input_boolean
        block_2_case_2:
          name: Block 2 Case 2 state
          selector:
            entity:
              domain: input_boolean
        block_2_case_3:
          name: Block 2 Case 3 state
          selector:
            entity:
              domain: input_boolean
        block_3:
          name: Block 3 state
          selector:
            entity:
              domain: input_boolean
        block_4:
          name: Block 4 state
          selector:
            entity:
              domain: input_boolean

mode: restart
max_exceeded: silent

trigger_variables:
  nordpool_prices: !input nordpool_prices
  min_temperature: !input min_temperature
  max_temperature: !input max_temperature
  heating_start_time: !input heating_start_time
  heating_end_time: !input heating_end_time
  pipeline: !input pipeline
  block_0: !input block_0
  block_1: !input block_1
  block_2_case_1: !input block_2_case_1 
  block_2_case_2: !input block_2_case_2 
  block_2_case_3: !input block_2_case_3 
  block_3: !input block_3
  block_4: !input block_4 

trigger:
  - platform: template
    value_template: >
      {% set pipeline_JSON = states(pipeline) %}
      {% if pipeline_JSON not in ['unknown', 'undefined', '', None] %}
        {{ 'on' in [(pipeline_JSON | from_json)['Block 2']['case_1'], (pipeline_JSON | from_json)['Block 2']['case_2'], (pipeline_JSON | from_json)['Block 2']['case_3']] }}
      {% else %}
        false
      {% endif %}
    id: pipeline_ID

action:
  # Debug: Check entities entities' values
  - service: system_log.write
    data:
      message: >
        Nordpool_prices: {{ nordpool_prices }}
        Min temperature: {{ min_temperature }}, 
        Max temperature: {{ max_temperature }},
        Pipeline: {{ pipeline }}, 
        Input Boolean States: 
        Block 0: {{ block_0 }}, 
        Block 1: {{ block_1 }}, 
        Block 2 Case 1: {{ block_2_case_1 }}, 
        Block 2 Case 2: {{ block_2_case_2 }}, 
        Block 2 Case 3: {{ block_2_case_3 }}, 
        Block 3: {{ block_3 }}, 
        Block 4: {{ block_4 }}

  # Debug: Check entities' values
  - service: system_log.write
    data:
      message: >
        Nordpool_prices: {{ nordpool_prices }}
        Min temperature: {{ states(min_temperature) }}, 
        Max temperature: {{ states(max_temperature) }}, 
        Pipeline: {{ states(pipeline) }},
        Input boolean states:
        Block 0: {{ states(block_0) }},
        Block 1: {{ states(block_1) }},
        Block 2 Case 1: {{ states(block_2_case_1) }},
        Block 2 Case 2: {{ states(block_2_case_2) }},
        Block 2 Case 3: {{ states(block_2_case_3) }},
        Block 3: {{ states(block_3) }}, 
        Block 4: {{ states(block_4) }}   

  # Init 
  - service: input_boolean.turn_off
    target:
      entity_id:
        - !input block_3
        - !input block_4   

  - choose:

    # Heat is at max
    - conditions:
        - condition: 
          value_template: "{{ states(pipeline) | from_json['Block 2']['case_1'] == on }}"
      sequence: 

    - conditions: 

        # Heat at min or below
        - condition: 
            value_template: "{{ states(pipeline) | from_json['Block 2']['case_2'] == on }}"
      sequence:
    
    - conditions: 

        # Heat between min and max
        - condition: 
            value_template: "{{ states(pipeline) | from_json['Block 2']['case_3'] == on }}"
      sequence: # Heat? Expensive right now.

  # Debug: provide updated JSON 
               