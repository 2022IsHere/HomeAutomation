# Name: financial_conditions.yaml
# Author: Sebastian Sopola @ https://www.linkedin.com/in/sebastiansopola/
# Description: This file containts the blueprint to provide logic to evaluate financial conditions



blueprint:
  name: Evaluate financial conditions
  description: Evaluate financial conditions. Output will be one of the following options; delay, preheat or agressive heat 
  domain: automation
  author: Sebastian Sopola @ https://www.linkedin.com/in/sebastiansopola/
  input:
    housekeep:
      name: House Keep Information
      icon: mdi:hoop-house
      description:  Assign person for notifications and critical alerts
      input:
        user:
          name: Housekeeper's phone
          description: This user is administrator of heating system
          selector:
            entity:
              filter:
    price_treshold:
      name: Price threshold
      icon: mdi:currency-eur
      description: Set the maximum acceptable electricity price for heating in cents/kWh
      input:
        price_treshold:
          name: Price threshold to protect against high prices 
          description: Set price treshold to prevent over extravicant energy bills
          selector:
            entity:
              filter:
                domain: input_number
    financial_information:
      name: Financial Information
      icon: mdi:finance
      description: Inputs related to financial data and market price trends used for heating strategy decisions
      input:
        price_trend:
          name: Price Trend
          description: Entity representing the calculated price trend
          selector:
            entity:
              filter:
                domain: sensor
        current_year_average_price:
          name: Current year's average price
          description: Sensor that provides the current year's average electric stock market price
          selector:
            entity:
              filter:
                domain: sensor
        nordpool:
          name: Nordpool
          description: Sensor that represents real-time electric stock market price data
          selector: 
            entity: 
              filter: 
                domain: sensor
    room_information:
      name: Room information
      icon: mdi:database
      description: These inputs provide information to make financial and heating strategy decisions
      input:  
        room_name:
          name: Room Name
          description: The name of the room for which the process should be conducted
          selector:
            text:
        room_temperature:
          name: Room temperature sensor 
          selector:
            entity: 
              filter: 
                domain: sensor  
        min_temperature:
          name: Minimum allowed room temperature
          selector:
            entity:
              filter:
                domain: input_number
        max_temperature:
          name: Maximum allowed room temperature
          selector:
            entity:
              filter:
                domain: input_number
        coefficient:
          name: Heat transfer coefficient
          selector:
            entity:
              filter:
                domain: sensor
        outdoor_temperature:
          name: Outdoor temperature sensor
          selector:
            entity:
              filter:
                domain: sensor
        target_temperature:
          name: Set room target temperature
          selector:
            entity:
              filter:
                domain: input_number
        living_space:
          name: Set room size (m^2)
          selector:
            entity:
              filter:
                domain: input_number
        heating_schedule_start_time:
          name: Heating schedule start time
          selector:
            entity: 
              filter:
                domain: input_datetime
        heating_schedule_end_time:
            name: Heating schedule end time
            selector:
              entity: 
                filter:
                  domain: input_datetime
    pipeline_settings:
      name: Room Heating System Interface
      description: This is a sensor configured with sensor attributes to control heating system program flow
      selector:
        entity:
          domain: sensor


mode: restart
max_exceeded: silent

variables:
  user: !input user
  price_treshold: !input price_treshold
  price_trend: !input price_trend
  current_year_average_price: !input current_year_average_price
  nordpool: !input nordpool
  room_name: !input room_name
  room_temperature: !input room_temperature
  min_temperature: !input min_temperature
  max_temperature: !input max_temperature
  coefficient: !input coefficient
  outdoor_temperature: !input outdoor_temperature
  target_temperature: !input target_temperature
  living_space: !input living_space
  heating_schedule_start_time: !input heating_schedule_start_time
  heating_schedule_end_time: !input heating_schedule_end_time

trigger_variables:
  pipeline_settings: !input pipeline_settings

trigger:
  - platform: template
    value_template: >
      {% set case_1 = state_attr(pipeline_settings, 'block_2_case_1') %}
      {% set case_2 = state_attr(pipeline_settings, 'block_2_case_2') %}
      {% set case_3 = state_attr(pipeline_settings, 'block_2_case_3') %}

      {% if case_1 == 'on' or case_2 == 'on' or case_3 == 'on' %}
        true
      {% else %}
        false
      {% endif %}

action:
  # ------------------
  # - INIT VARIABLES -
  # ------------------
  - variables:
      temperature_at_or_over_max: "{{ state_attr(pipeline_settings, 'block_2_case_1') == 'on' }}"
      temperature_at_or_below_min: "{{ state_attr(pipeline_settings, 'block_2_case_2') == 'on' }}"
      temperature_between_min_max: "{{ state_attr(pipeline_settings, 'block_2_case_3') == 'on' }}"


      current_price: "{{ state_attr(nordpool, 'current_price') | float }}"
      price_unit: "{{  state_attr(nordpool, 'unit_of_measurement') }}"
      minimum_temperature: "{{ states(min_temperature) | float }}"
      room_temperature: "{{ states(room_temperature) | float }}"


      price_category_expensive: "{{ state_attr(nordpool, 'current_price') | float > states(current_year_average_price) | float }}"
      price_category_average: "{{ state_attr(nordpool, 'current_price') | float == states(current_year_average_price) | float }}"
      price_category_cheap: "{{ state_attr(nordpool, 'current_price') | float < states(current_year_average_price) | float }}"
      
      
      price_trend_expensive: "{{ price_trend == 'expensive' }}"
      price_trend_average: "{{ price_trend == 'average' }}"
      price_trend_cheap: "{{ price_trend == 'cheap' }}"


      delay_heat: "{{ 'input_boolean.' + room_name | lower + '_delay_heat' }}"
      maintain_heat: "{{ 'input_boolean.' + room_name | lower + '_maintain_heat' }}"
      preheat_maximum: "{{ 'input_boolean.' + room_name | lower + '_preheat_max' }}"

  - choose:
      # Heat is at max
      - conditions:
          - condition: template
            value_template: "{{ temperature_at_or_over_max }}"
        sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: >
                {{ delay_heat }}

      # Heat at min or below
      - conditions:
          - condition: template
            value_template: "{{ temperature_at_or_below_min }}"
        sequence:
          - choose:
              # Price category: expensive
              - conditions:
                  - condition: template
                    value_template: "{{ price_category_expensive }}"
                sequence:
                  - service: notify.{{ user }}
                    data:
                      title: >
                        Huom! Korkea sähkön hinta
                      message: >
                        Hinta: {{ current_price }} {{ price_unit }}. 
                        Huone {{ room_name }} on {{ room_temperature }}°C. 
                        Laske lämmitysrajaa? Nykyinen minimi: {{ minimum_temperature }}°C. 
                        Reagoi 5 minuutin sisällä.
                  - delay: "00:05:00"  # 5 minutes
                  - choose:
                      # User response
                      - conditions:
                          - condition: template
                            value_template: "{{ minimum_temperature < room_temperature }}"
                        sequence:
                          - service: input_boolean.turn_on
                            target:
                              entity_id: >
                                {{ delay_heat }}



                      # No user response
                      - conditions:
                          - condition: template
                            value_template: "{{ states(min_temperature) | float >= states(room_temperature) | float }}" # Re-evaluate
                        sequence:
                          - service: input_boolean.turn_on
                            target:
                              entity_id: >
                                {{ maintain_heat }}



              # Price category: average
              - conditions:
                  - condition: template
                    value_template: "{{ price_category_average }}"
                sequence:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: >
                        {{ maintain_heat }}



              # Price category: cheap
              - conditions:
                  - condition: template
                    value_template: "{{ price_category_cheap }}"
                sequence:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: >
                        {{ preheat_maximum }}


      # Heat between min and max
      - conditions:
          - condition: template
            value_template: "{{ temperature_between_min_max }}"
        sequence:

            #-----------------
            # INIT VARIABLES -
            #-----------------
          - variables:
              price_trend: "{{ states(price_trend) }}"
              current_price: "{{ state_attr(nordpool, 'current_price') | float }}"
              price_treshold: "{{ states(price_treshold) | float }}"
              heat_transfer_coefficient: "{{ states(coefficient) | float }}"
              living_space: "{{ states(living_space) | float }}"
              room_temperature: "{{ states(room_temperature) | float }}"
              outdoor_temperature: "{{ states(outdoor_temperature) | float }}"
              target_temperature: "{{ states(target_temperature) | float }}"

          - choose:

              # Price category: expensive
              - conditions:
                  - condition: template
                    value_template: "{{ price_category_expensive }}"
                sequence:
                  - choose:
                      # Trend category check: expensive
                      - conditions:
                          - condition: template
                            value_template: "{{ price_trend_expensive }}"
                        sequence:
                          - variables:
                              delay_set: false  
                          # Search cheaper price than current
                          - repeat:
                              count: 8
                              sequence:
                                # Check if delay is already set
                                - choose:
                                    - conditions:
                                        - condition: template
                                          value_template: "{{ delay_set == false }}"
                                      sequence:
                                        - variables:
                                            hour: "{{ ((now().hour + repeat.index) % 24) }}"
                                            price: >
                                              {% set hour_offset = (now().hour + repeat.index) %}
                                              {% if hour_offset < 24 %}
                                                {{ (state_attr(nordpool, 'today')[hour_offset]) | float }}  
                                              {% else %}
                                                {% if state_attr(nordpool, 'tomorrow_valid') %}
                                                  {{ (state_attr(nordpool, 'tomorrow')[hour_offset - 24]) | float }}  
                                                {% else %}
                                                  100
                                                {% endif %}
                                              {% endif %}
                                        # Process the price
                                        - choose:
                                            - conditions:
                                                - condition: template
                                                  value_template: "{{ price != 100.0 }}"  # Skip invalid prices
                                              sequence:
                                                - choose:
                                                    # There's cheaper hour than current
                                                    - conditions:
                                                        - condition: template
                                                          value_template: "{{ price < current_price }}"
                                                      sequence:
                                                        # Calculate heat transfer
                                                        - variables:
                                                            heat_loss: >
                                                              {{ (heat_transfer_coefficient * living_space * (room_temperature - outdoor_temperature)) * (repeat.index + 1) }}
                                                            heat_requirement: >
                                                              {{ (heat_transfer_coefficient * living_space * (target_temperature - room_temperature)) * (repeat.index + 1) }}
                                                            estimated_room_temperature: >
                                                              {{ room_temperature + (heat_requirement - heat_loss) / (heat_transfer_coefficient * living_space) }}
                                                        # Check if the room can hold until the next cheaper price
                                                        - choose:
                                                            - conditions:
                                                                - condition: template
                                                                  value_template: "{{ estimated_room_temperature >= minimum_temperature }}"
                                                              sequence:
                                                                # Delay for the cheap hour
                                                                - service: input_boolean.turn_on
                                                                  target:
                                                                    entity_id: >
                                                                      {{ delay_heat }}
                                                                # Set the flag to end the loop
                                                                - variables:
                                                                    delay_set: true


                          # There's no cheaper hour than current
                          - choose:
                              - conditions:
                                  - condition: template
                                    value_template: "{{ not delay_set }}"
                                sequence:
                                  - variables:
                                      heat_loss: >
                                        {{ (heat_transfer_coefficient | float * living_space | float * (room_temperature | float - outdoor_temperature | float)) * 8 | float }}
                                      heat_requirement: >
                                        {{ (heat_transfer_coefficient | float * living_space | float * (target_temperature | float - room_temperature | float)) * 8 | float }}
                                      estimated_room_temperature: >
                                        {{ room_temperature | float + (heat_requirement | float - heat_loss | float) / (heat_transfer_coefficient | float * living_space | float) }}

                                  # Best case: room can sustain temperature for 8 hours
                                  - choose:
                                      - conditions:
                                          - condition: template
                                            value_template: "{{ estimated_room_temperature >= minimum_temperature }}"
                                        sequence:
                                          # Delay heating
                                          - service: input_boolean.turn_on
                                            target:
                                              entity_id: "{{ delay_heat }}"

                                      - conditions:
                                          - condition: template
                                            value_template: "{{ estimated_room_temperature < minimum_temperature }}"
                                        sequence:
                                          # Worst case: room can't sustain
                                          - choose:
                                               # Next best case: Price is below cap
                                              - conditions:
                                                  - condition: template
                                                    value_template: "{{ current_price < price_treshold }}"
                                                sequence:
                                                  # Heat; lowering risk of heating in the next 8 hours
                                                  - service: input_boolean.turn_on
                                                    target:
                                                      entity_id: "{{ min_heat }}"
                                              - conditions:
                                                  - condition: template
                                                    value_template: "{{ current_price >= price_treshold }}"
                                                sequence:
                                                  # Price is too high; delay heating and risk temperature drop below set min level
                                                  - service: input_boolean.turn_on
                                                    target:
                                                      entity_id: "{{ delay_heat }}"



                      # Trend category check: average
                      - conditions:
                          - condition: template
                            value_template: "{{ price_trend_average }}"
                        sequence:
                          - variables:
                              delay_set: false
                          # Search cheaper price than current
                          - repeat:
                              count: 8
                              sequence:
                                # Check if delay is already set
                                - choose:
                                    - conditions:
                                        - condition: template
                                          value_template: "{{ delay_set == false }}"
                                      sequence:
                                        - variables:
                                            hour: "{{ ((now().hour + repeat.index) % 24) }}"
                                            price: >
                                              {% set hour_offset = (now().hour + repeat.index) %}
                                              {% if hour_offset < 24 %}
                                                {{ (state_attr(nordpool, 'today')[hour_offset]) | float }}  
                                              {% else %}
                                                {% if state_attr(nordpool, 'tomorrow_valid') %}
                                                  {{ (state_attr(nordpool, 'tomorrow')[hour_offset - 24]) | float }}  
                                                {% else %}
                                                  100
                                                {% endif %}
                                              {% endif %}
                                        # Process the price
                                        - choose:
                                            - conditions:
                                                - condition: template
                                                  value_template: "{{ price != 100.0 }}"  # Skip invalid prices
                                              sequence:
                                                - choose:
                                                    # There's cheaper hour than current
                                                    - conditions:
                                                        - condition: template
                                                          value_template: "{{ price < current_price }}"
                                                      sequence:
                                                        # Calculate heat transfer
                                                        - variables:
                                                            heat_loss: >
                                                              {{ (heat_transfer_coefficient * living_space * (room_temperature - outdoor_temperature)) * (repeat.index + 1) }}
                                                            heat_requirement: >
                                                              {{ (heat_transfer_coefficient * living_space * (target_temperature - room_temperature)) * (repeat.index + 1) }}
                                                            estimated_room_temperature: >
                                                              {{ room_temperature + (heat_requirement - heat_loss) / (heat_transfer_coefficient * living_space) }}
                                                        # Check if the room can hold until the next cheaper price
                                                        - choose:
                                                            - conditions:
                                                                - condition: template
                                                                  value_template: "{{ estimated_room_temperature >= minimum_temperature }}"
                                                              sequence:
                                                                # Delay for the cheap hour
                                                                - service: input_boolean.turn_on
                                                                  target:
                                                                    entity_id: >
                                                                      {{ delay_heat }}
                                                                # Set the flag to end the loop
                                                                - variables:
                                                                    delay_set: true                          


                          # There's no cheaper hour than current
                          - choose:
                              - conditions:
                                  - condition: template
                                    value_template: "{{ not delay_set }}"
                                sequence:
                                  # Worst case: room can't sustain heat
                                  - choose:
                                        # Next best case: Price is below cap
                                      - conditions:
                                          - condition: template
                                            value_template: "{{ current_price < price_treshold }}"
                                        sequence:
                                          # Heat; lowering risk of heating during extra expensive hours
                                          - service: input_boolean.turn_on
                                            target:
                                              entity_id: "{{ min_heat }}"
                                      - conditions:
                                          - condition: template
                                            value_template: "{{ current_price >= price_treshold }}"
                                        sequence:
                                          # Price is too high; delay heating and risk temperature drop below set min level
                                          - service: input_boolean.turn_on
                                            target:
                                              entity_id: "{{ delay_heat }}"



                      # Trend category check: cheap
                      - conditions:
                          - condition: template
                            value_template: "{{ price_trend_cheap }}"
                        sequence:
                          - variables:
                              delay_set: false  
                          # Search cheaper price than current
                          - repeat:
                              count: 8
                              sequence:
                                # Check if delay is already set
                                - choose:
                                    - conditions:
                                        - condition: template
                                          value_template: "{{ delay_set == false }}"
                                      sequence:
                                        - variables:
                                            hour: "{{ ((now().hour + repeat.index) % 24) }}"
                                            price: >
                                              {% set hour_offset = (now().hour + repeat.index) %}
                                              {% if hour_offset < 24 %}
                                                {{ (state_attr(nordpool, 'today')[hour_offset]) | float }}  
                                              {% else %}
                                                {% if state_attr(nordpool, 'tomorrow_valid') %}
                                                  {{ (state_attr(nordpool, 'tomorrow')[hour_offset - 24]) | float }}  
                                                {% else %}
                                                  100
                                                {% endif %}
                                              {% endif %}
                                        # Process the price
                                        - choose:
                                            - conditions:
                                                - condition: template
                                                  value_template: "{{ price != 100.0 }}"  # Skip invalid prices
                                              sequence:
                                                - choose:
                                                    # There's cheaper hour than current
                                                    - conditions:
                                                        - condition: template
                                                          value_template: "{{ price < current_price }}"
                                                      sequence:
                                                        # Calculate heat transfer
                                                        - variables:
                                                            heat_loss: >
                                                              {{ (heat_transfer_coefficient * living_space * (room_temperature - outdoor_temperature)) * (repeat.index + 1) }}
                                                            heat_requirement: >
                                                              {{ (heat_transfer_coefficient * living_space * (target_temperature - room_temperature)) * (repeat.index + 1) }}
                                                            estimated_room_temperature: >
                                                              {{ room_temperature + (heat_requirement - heat_loss) / (heat_transfer_coefficient * living_space) }}
                                                        # Check if the room can hold until the next cheaper price
                                                        - choose:
                                                            - conditions:
                                                                - condition: template
                                                                  value_template: "{{ estimated_room_temperature >= minimum_temperature }}"
                                                              sequence:
                                                                # Delay for the cheap hour
                                                                - service: input_boolean.turn_on
                                                                  target:
                                                                    entity_id: >
                                                                      {{ delay_heat }}
                                                                # Set the flag to end the loop
                                                                - variables:
                                                                    delay_set: true                          


                          # There's no cheaper hour than current
                          - choose:
                              - conditions:
                                  - condition: template
                                    value_template: "{{ not delay_set }}"
                                sequence:
                                  # Worst case: room can't sustain heat
                                  - choose:
                                        # Next best case: Price is below cap
                                      - conditions:
                                          - condition: template
                                            value_template: "{{ current_price < price_treshold }}"
                                        sequence:
                                          # Heat; lowering risk of heating in the next 8 hours
                                          - service: input_boolean.turn_on
                                            target:
                                              entity_id: "{{ min_heat }}"
                                      - conditions:
                                          - condition: template
                                            value_template: "{{ current_price >= price_treshold }}"
                                        sequence:
                                          # Price is too high; delay heating and risk temperature drop below set min level
                                          - service: input_boolean.turn_on
                                            target:
                                              entity_id: "{{ delay_heat }}"



              # Price category: average
              - conditions:
                  - condition: template
                    value_template: "{{ price_category_average }}"
                sequence:
                  - choose:
                      # Trend category check: expensive
                      - conditions:
                          - condition: template
                            value_template: "{{ price_trend_expensive }}"
                        sequence:
                          - variables:
                              delay_set: false  
                          # Search cheaper price than current
                          - repeat:
                              count: 8
                              sequence:
                                # Check if delay is already set
                                - choose:
                                    - conditions:
                                        - condition: template
                                          value_template: "{{ delay_set == false }}"
                                      sequence:
                                        - variables:
                                            hour: "{{ ((now().hour + repeat.index) % 24) }}"
                                            price: >
                                              {% set hour_offset = (now().hour + repeat.index) %}
                                              {% if hour_offset < 24 %}
                                                {{ (state_attr(nordpool, 'today')[hour_offset]) | float }}  
                                              {% else %}
                                                {% if state_attr(nordpool, 'tomorrow_valid') %}
                                                  {{ (state_attr(nordpool, 'tomorrow')[hour_offset - 24]) | float }}  
                                                {% else %}
                                                  100
                                                {% endif %}
                                              {% endif %}
                                        # Process the price
                                        - choose:
                                            - conditions:
                                                - condition: template
                                                  value_template: "{{ price != 100.0 }}"  # Skip invalid prices
                                              sequence:
                                                - choose:
                                                    # There's cheaper hour than current
                                                    - conditions:
                                                        - condition: template
                                                          value_template: "{{ price < state_attr(nordpool, 'current_price') | float }}"
                                                      sequence:
                                                        # Calculate heat transfer
                                                        - variables:
                                                            heat_loss: >
                                                              {{ (heat_transfer_coefficient * living_space * (room_temperature - outdoor_temperature)) * (repeat.index + 1) }}
                                                            heat_requirement: >
                                                              {{ (heat_transfer_coefficient * living_space * (target_temperature - room_temperature)) * (repeat.index + 1) }}
                                                            estimated_room_temperature: >
                                                              {{ room_temperature + (heat_requirement - heat_loss) / (heat_transfer_coefficient * living_space) }}
                                                        # Check if the room can hold until the next cheaper price
                                                        - choose:
                                                            - conditions:
                                                                - condition: template
                                                                  value_template: "{{ estimated_room_temperature >= minimum_temperature }}"
                                                              sequence:
                                                                # Delay for the cheap hour
                                                                - service: input_boolean.turn_on
                                                                  target:
                                                                    entity_id: >
                                                                      {{ delay_heat }}
                                                                # Set the flag to end the loop
                                                                - variables:
                                                                    delay_set: true


                          # There's no cheaper hour than current
                          - choose:
                              - conditions:
                                  - condition: template
                                    value_template: "{{ not delay_set }}"
                                sequence:
                                  - variables:
                                      heat_loss: >
                                        {{ (heat_transfer_coefficient | float * living_space | float * (room_temperature | float - outdoor_temperature | float)) * 8 | float }}
                                      heat_requirement: >
                                        {{ (heat_transfer_coefficient | float * living_space | float * (target_temperature | float - room_temperature | float)) * 8 | float }}
                                      estimated_room_temperature: >
                                        {{ room_temperature | float + (heat_requirement | float - heat_loss | float) / (heat_transfer_coefficient | float * living_space | float) }}

                                  # Best case: room can sustain temperature for 8 hours
                                  - choose:
                                      - conditions:
                                          - condition: template
                                            value_template: "{{ estimated_room_temperature >= minimum_temperature }}"
                                        sequence:
                                          # Delay heating
                                          - service: input_boolean.turn_on
                                            target:
                                              entity_id: "{{ delay_heat }}"

                                      - conditions:
                                          - condition: template
                                            value_template: "{{ estimated_room_temperature < minimum_temperature }}"
                                        sequence:
                                          # Worst case: room can't sustain
                                          - choose:
                                               # Next best case: Price is below cap
                                              - conditions:
                                                  - condition: template
                                                    value_template: "{{ current_price < price_treshold }}"
                                                sequence:
                                                  # Heat; lowering risk of heating in the next 8 hours
                                                  - service: input_boolean.turn_on
                                                    target:
                                                      entity_id: "{{ preheat_maximum }}"
                                              - conditions:
                                                  - condition: template
                                                    value_template: "{{ current_price >= price_treshold }}"
                                                sequence:
                                                  # Price is too high; delay heating and risk temperature drop below set min level
                                                  - service: input_boolean.turn_on
                                                    target:
                                                      entity_id: "{{ delay_heat }}"
                          

                      # Trend category check: average
                      - conditions:
                          - condition: template
                            value_template: "{{ price_trend_average }}"
                        sequence:
                          # Search cheaper price than current
                          - repeat:
                              count: 8
                              sequence:
                                # Check if delay is already set
                                - choose:
                                    - conditions:
                                        - condition: template
                                          value_template: "{{ delay_set == false }}"
                                      sequence:
                                        - variables:
                                            hour: "{{ ((now().hour + repeat.index) % 24) }}"
                                            price: >
                                              {% set hour_offset = (now().hour + repeat.index) %}
                                              {% if hour_offset < 24 %}
                                                {{ (state_attr(nordpool, 'today')[hour_offset]) | float }}  
                                              {% else %}
                                                {% if state_attr(nordpool, 'tomorrow_valid') %}
                                                  {{ (state_attr(nordpool, 'tomorrow')[hour_offset - 24]) | float }}  
                                                {% else %}
                                                  100
                                                {% endif %}
                                              {% endif %}
                                        # Process the price
                                        - choose:
                                            - conditions:
                                                - condition: template
                                                  value_template: "{{ price != 100.0 }}"  # Skip invalid prices
                                              sequence:
                                                - choose:
                                                    # There's cheaper hour than current
                                                    - conditions:
                                                        - condition: template
                                                          value_template: "{{ price < current_price }}"
                                                      sequence:
                                                        # Calculate heat transfer
                                                        - variables:
                                                            heat_loss: >
                                                              {{ (heat_transfer_coefficient * living_space * (room_temperature - outdoor_temperature)) * (repeat.index + 1) }}
                                                            heat_requirement: >
                                                              {{ (heat_transfer_coefficient * living_space * (target_temperature - room_temperature)) * (repeat.index + 1) }}
                                                            estimated_room_temperature: >
                                                              {{ room_temperature + (heat_requirement - heat_loss) / (heat_transfer_coefficient * living_space) }}
                                                        # Check if the room can hold until the next cheaper price
                                                        - choose:
                                                            - conditions:
                                                                - condition: template
                                                                  value_template: "{{ estimated_room_temperature >= minimum_temperaturet }}"
                                                              sequence:
                                                                # Delay for the cheap hour
                                                                - service: input_boolean.turn_on
                                                                  target:
                                                                    entity_id: >
                                                                      {{ delay_heat }}
                                                                # Set the flag to end the loop
                                                                - variables:
                                                                    delay_set: true                          


                          # There's no cheaper hour than current
                          - choose:
                              - conditions:
                                  - condition: template
                                    value_template: "{{ not delay_set }}"
                                sequence:
                                  # Preheat; lowering risk of heating in the next 8 hours
                                  - service: input_boolean.turn_on
                                    target:
                                      entity_id: "{{ maintain_heat }}"


                      # Trend category check: cheap
                      - conditions:
                          - condition: template
                            value_template: "{{ price_trend_cheap }}"
                        sequence:
                          # Search cheaper price than current
                          - repeat:
                              count: 8
                              sequence:
                                # Check if delay is already set
                                - choose:
                                    - conditions:
                                        - condition: template
                                          value_template: "{{ delay_set == false }}"
                                      sequence:
                                        - variables:
                                            hour: "{{ ((now().hour + repeat.index) % 24) }}"
                                            price: >
                                              {% set hour_offset = (now().hour + repeat.index) %}
                                              {% if hour_offset < 24 %}
                                                {{ (state_attr(nordpool, 'today')[hour_offset]) | float }}  
                                              {% else %}
                                                {% if state_attr(nordpool, 'tomorrow_valid') %}
                                                  {{ (state_attr(nordpool, 'tomorrow')[hour_offset - 24]) | float }}  
                                                {% else %}
                                                  100
                                                {% endif %}
                                              {% endif %}
                                        # Process the price
                                        - choose:
                                            - conditions:
                                                - condition: template
                                                  value_template: "{{ price != 100.0 }}"  # Skip invalid prices
                                              sequence:
                                                - choose:
                                                    # There's cheaper hour than current
                                                    - conditions:
                                                        - condition: template
                                                          value_template: "{{ price < current_price }}"
                                                      sequence:
                                                        # Calculate heat transfer
                                                        - variables:
                                                            heat_loss: >
                                                              {{ (heat_transfer_coefficient * living_space * (room_temperature - outdoor_temperature)) * (repeat.index + 1) }}
                                                            heat_requirement: >
                                                              {{ (heat_transfer_coefficient * living_space * (target_temperature - room_temperature)) * (repeat.index + 1) }}
                                                            estimated_room_temperature: >
                                                              {{ room_temperature + (heat_requirement - heat_loss) / (heat_transfer_coefficient * living_space) }}
                                                        # Check if the room can hold until the next cheaper price
                                                        - choose:
                                                            - conditions:
                                                                - condition: template
                                                                  value_template: "{{ estimated_room_temperature >= minimum_temperature }}"
                                                              sequence:
                                                                # Delay for the cheap hour
                                                                - service: input_boolean.turn_on
                                                                  target:
                                                                    entity_id: >
                                                                      {{ delay_heat }}
                                                                # Set the flag to end the loop
                                                                - variables:
                                                                    delay_set: true                          


                          # There's no cheaper hour than current
                          - choose:
                              - conditions:
                                  - condition: template
                                    value_template: "{{ not delay_set }}"
                                sequence:
                                  # Preheat; lowering risk of heating in the next 8 hours
                                  - service: input_boolean.turn_on
                                    target:
                                      entity_id: "{{ maintain_heat }}"
              


              # Price category: cheap
              - conditions:
                  - condition: template
                    value_template: "{{ price_category_cheap }}"
                sequence:
                  - choose:
                      # Trend category check: expensive
                      - conditions:
                          - condition: template
                            value_template: "{{ price_trend_expensive }}"
                        sequence:
                          - variables:
                              delay_set: false  
                          # Search cheaper price than current
                          - repeat:
                              count: 8
                              sequence:
                                # Check if delay is already set
                                - choose:
                                    - conditions:
                                        - condition: template
                                          value_template: "{{ delay_set == false }}"
                                      sequence:
                                        - variables:
                                            hour: "{{ ((now().hour + repeat.index) % 24) }}"
                                            price: >
                                              {% set hour_offset = (now().hour + repeat.index) %}
                                              {% if hour_offset < 24 %}
                                                {{ (state_attr(nordpool, 'today')[hour_offset]) | float }}  
                                              {% else %}
                                                {% if state_attr(nordpool, 'tomorrow_valid') %}
                                                  {{ (state_attr(nordpool, 'tomorrow')[hour_offset - 24]) | float }}  
                                                {% else %}
                                                  100
                                                {% endif %}
                                              {% endif %}
                                        # Process the price
                                        - choose:
                                            - conditions:
                                                - condition: template
                                                  value_template: "{{ price != 100.0 }}"  # Skip invalid prices
                                              sequence:
                                                - choose:
                                                    # There's cheaper hour than current
                                                    - conditions:
                                                        - condition: template
                                                          value_template: "{{ price < current_price }}"
                                                      sequence:
                                                        # Calculate heat transfer
                                                        - variables:
                                                            heat_loss: >
                                                              {{ (heat_transfer_coefficient * living_space * (room_temperature - outdoor_temperature)) * (repeat.index + 1) }}
                                                            heat_requirement: >
                                                              {{ (heat_transfer_coefficient * living_space * (target_temperature - room_temperature)) * (repeat.index + 1) }}
                                                            estimated_room_temperature: >
                                                              {{ room_temperature + (heat_requirement - heat_loss) / (heat_transfer_coefficient * living_space) }}
                                                        # Check if the room can hold until the next cheaper price
                                                        - choose:
                                                            - conditions:
                                                                - condition: template
                                                                  value_template: "{{ estimated_room_temperature >= minimum_temperature}}"
                                                              sequence:
                                                                # Delay for the cheap hour
                                                                - service: input_boolean.turn_on
                                                                  target:
                                                                    entity_id: >
                                                                      {{ delay_heat }}
                                                                # Set the flag to end the loop
                                                                - variables:
                                                                    delay_set: true


                          # There's no cheaper hour than current
                          - choose:
                              - conditions:
                                  - condition: template
                                    value_template: "{{ not delay_set }}"
                                sequence:
                                  # Preheat; lowering risk of heating in the next 8 hours
                                  - service: input_boolean.turn_on
                                    target:
                                      entity_id: "{{ preheat_maximum }}"


                      # Trend category check: average
                      - conditions:
                          - condition: template
                            value_template: "{{ price_trend_average }}"
                        sequence:
                          # Search cheaper price than current
                          - repeat:
                              count: 8
                              sequence:
                                # Check if delay is already set
                                - choose:
                                    - conditions:
                                        - condition: template
                                          value_template: "{{ delay_set == false }}"
                                      sequence:
                                        - variables:
                                            hour: "{{ ((now().hour + repeat.index) % 24) }}"
                                            price: >
                                              {% set hour_offset = (now().hour + repeat.index) %}
                                              {% if hour_offset < 24 %}
                                                {{ (state_attr(nordpool, 'today')[hour_offset]) | float }}  
                                              {% else %}
                                                {% if state_attr(nordpool, 'tomorrow_valid') %}
                                                  {{ (state_attr(nordpool, 'tomorrow')[hour_offset - 24]) | float }}  
                                                {% else %}
                                                  100
                                                {% endif %}
                                              {% endif %}
                                        # Process the price
                                        - choose:
                                            - conditions:
                                                - condition: template
                                                  value_template: "{{ price != 100.0 }}"  # Skip invalid prices
                                              sequence:
                                                - choose:
                                                    # There's cheaper hour than current
                                                    - conditions:
                                                        - condition: template
                                                          value_template: "{{ price < current_price }}"
                                                      sequence:
                                                        # Calculate heat transfer
                                                        - variables:
                                                            heat_loss: >
                                                              {{ (heat_transfer_coefficient * living_space * (room_temperature - outdoor_temperature)) * (repeat.index + 1) }}
                                                            heat_requirement: >
                                                              {{ (heat_transfer_coefficient * living_space * (target_temperature - room_temperature)) * (repeat.index + 1) }}
                                                            estimated_room_temperature: >
                                                              {{ room_temperature + (heat_requirement - heat_loss) / (heat_transfer_coefficient * living_space) }}
                                                        # Check if the room can hold until the next cheaper price
                                                        - choose:
                                                            - conditions:
                                                                - condition: template
                                                                  value_template: "{{ estimated_room_temperature >= minimum_temperaturt }}"
                                                              sequence:
                                                                # Delay for the cheap hour
                                                                - service: input_boolean.turn_on
                                                                  target:
                                                                    entity_id: >
                                                                      {{ delay_heat }}
                                                                # Set the flag to end the loop
                                                                - variables:
                                                                    delay_set: true                          


                          # There's no cheaper hour than current
                          - choose:
                              - conditions:
                                  - condition: template
                                    value_template: "{{ not delay_set }}"
                                sequence:
                                  # Preheat; lowering risk of heating in the next 8 hours
                                  - service: input_boolean.turn_on
                                    target:
                                      entity_id: "{{ maintain_heat }}"


                      # Trend category check: cheap
                      - conditions:
                          - condition: template
                            value_template: "{{ price_trend_cheap }}"
                        sequence:
                          # Search cheaper price than current
                          - repeat:
                              count: 8
                              sequence:
                                # Check if delay is already set
                                - choose:
                                    - conditions:
                                        - condition: template
                                          value_template: "{{ delay_set == false }}"
                                      sequence:
                                        - variables:
                                            hour: "{{ ((now().hour + repeat.index) % 24) }}"
                                            price: >
                                              {% set hour_offset = (now().hour + repeat.index) %}
                                              {% if hour_offset < 24 %}
                                                {{ (state_attr(nordpool, 'today')[hour_offset]) | float }}  
                                              {% else %}
                                                {% if state_attr(nordpool, 'tomorrow_valid') %}
                                                  {{ (state_attr(nordpool, 'tomorrow')[hour_offset - 24]) | float }}  
                                                {% else %}
                                                  100
                                                {% endif %}
                                              {% endif %}
                                        # Process the price
                                        - choose:
                                            - conditions:
                                                - condition: template
                                                  value_template: "{{ price != 100.0 }}"  # Skip invalid prices
                                              sequence:
                                                - choose:
                                                    # There's cheaper hour than current
                                                    - conditions:
                                                        - condition: template
                                                          value_template: "{{ price < current_price }}"
                                                      sequence:
                                                        # Calculate heat transfer
                                                        - variables:
                                                            heat_loss: >
                                                              {{ (heat_transfer_coefficient * living_space * (room_temperature - outdoor_temperature)) * (repeat.index + 1) }}
                                                            heat_requirement: >
                                                              {{ (heat_transfer_coefficient * living_space * (target_temperature - room_temperature)) * (repeat.index + 1) }}
                                                            estimated_room_temperature: >
                                                              {{ room_temperature + (heat_requirement - heat_loss) / (heat_transfer_coefficient * living_space) }}
                                                        # Check if the room can hold until the next cheaper price
                                                        - choose:
                                                            - conditions:
                                                                - condition: template
                                                                  value_template: "{{ estimated_room_temperature >= minimum_temperature }}"
                                                              sequence:
                                                                # Delay for the cheap hour
                                                                - service: input_boolean.turn_on
                                                                  target:
                                                                    entity_id: >
                                                                      {{ delay_heat }}
                                                                # Set the flag to end the loop
                                                                - variables:
                                                                    delay_set: true                          


                          # There's no cheaper hour than current
                          - choose:
                              - conditions:
                                  - condition: template
                                    value_template: "{{ not delay_set }}"
                                sequence:
                                  # Preheat; lowering risk of heating in the next 8 hours
                                  - service: input_boolean.turn_on
                                    target:
                                      entity_id: "{{ maintain_heat }}"

