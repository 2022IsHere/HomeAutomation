# Name: financial_conditions.yaml
# Author: Sebastian Sopola @ https://www.linkedin.com/in/sebastiansopola/
# Description: This file containts the blueprint to provide logic to evaluate financial conditions



blueprint:
  name: Evaluate financial conditions
  description: Evaluate financial conditions. Output will be one of the following options; delay, preheat or agressive heat 
  domain: automation
  author: Sebastian Sopola @ https://www.linkedin.com/in/sebastiansopola/
  input:
    housekeep:
      name: House Keep Information
      icon: mdi:hoop-house
      description:  Inputs provide notifications services ot administrator
      input:
        user:
          name: Housekeeper's phone
          description: This user is administrator of heating system
          selector:
            entity:
              filter:
                domain: device_tracker
    financial_information:
      name: Financial Information
      icon: mdi:finance
      description: Inputs related to financial data and market price trends used for heating strategy decisions
      input:
        price_trend:
          name: Input price trend entity
          description: Entity representing the calculated price trend for the next 8 hours
          selector:
            entity:
              filter:
                domain: input_text
        current_year_average_price:
          name: Input current year average price sensor
          description: Sensor that provides the current year's average electric stock market price
          selector:
            entity:
              filter:
                domain: sensor
        nordpool:
          name: Input sensor nordpool
          description: Sensor that represents real-time electric stock market price data
          selector: 
            entity: 
              filter: 
                domain: sensor
    room_information:
      name: Provide min_temperature, max_temperature and heating schedule start and end times
      icon: mdi:magnify
      description: These inputs provide information to make financial and heating strategy decisions
      input:  
        room_name:
          name: Room Name
          description: The name of the room for which the process should be conducted
          selector:
            text:
        room_temperature:
          name: Input sensor room temperature 
          selector:
            entity: 
              filter: 
                domain: sensor  
        min_temperature:
          name: Minimum allowed room temperature
          selector:
            entity:
              filter:
                domain: input_number
        max_temperature:
          name: Maximum allowed room temperature
          selector:
            entity:
              filter:
                domain: input_number
        heating_schedule_start_time:
          name: Heating schedule start time
          selector:
            entity: 
              filter:
                domain: input_datetime
        heating_schedule_end_time:
            name: Input number heating schedule end time
            selector:
              entity: 
                filter:
                  domain: input_datetime
    pipeline_settings:
      name: Room Heating System Interface
      description: This is a sensor configured with sensor attributes to control heating system program flow
      selector:
        entity:
          domain: sensor


mode: restart
max_exceeded: silent

variables:
  price_trend: !input price_trend
  current_year_average_price: !input current_year_average_price
  nordpool: !input nordpool
  room_name: !input room_name
  room_temperature: !input room_temperature
  min_temperature: !input min_temperature
  max_temperature: !input max_temperature
  heating_schedule_start_time: !input heating_schedule_start_time
  heating_schedule_end_time: !input heating_schedule_end_time

trigger_variables:
  pipeline_settings: !input pipeline_settings

trigger:
  - platform: template
    value_template: >
      {% set case_1 = state_attr(pipeline_settings, 'block_2_case_1') %}
      {% set case_2 = state_attr(pipeline_settings, 'block_2_case_2') %}
      {% set case_3 = state_attr(pipeline_settings, 'block_2_case_3') %}

      {% if case_1 == 'on' or case_2 == 'on' or case_3 == 'on' %}
        true
      {% else %}
        false
      {% endif %}

action: 

  - choose:
      # Heat is at max
      - conditions:
          - condition: template
            value_template: "{{ state_attr(pipeline_settings, 'block_2_case_1') == 'on'  }}"
        sequence: 
          - service: input_boolean.turn_on
            target:
              entity_id: >
                {{ 'input_boolean.' + room_name | lower + '_delay_heat' }}

      # Heat at min or below
      - conditions:
          - condition: template
            value_template: "{{ state_attr(pipeline_settings, 'block_2_case_2') == 'on' }}"
        sequence:
          - choose:
              - conditions:
                  # Price is expensive and heating is necessary
                  - condition: template
                    value_template: "{{ if state_attr(nordpool, 'current_price') > current_year_average_price }}"
                sequence:
                  - service: notify.{{ user }}
                    data:
                      title: >
                        {{room_name}} is at {{ states(room_temperature) }}°C
                    message: >
                      Nykyinen sähkön hinta on korkea. Hinta: {{ state_attr(nordpool, 'current_price') }}{{ state_attr(nordpool, 'unit_of_measuremen') }}
                      Haluatko laskea lämpörajaa? Nykyinen: {{states(min_temperature)}}
                      Reagoi seuraavan 5 minuutin aikana. Muuten lämmitys hoidetaan minimilämmöllä!
                  - service: delay
                    wait_for: 5 
                  - conditions:
                      - condition:
                        value_template: "{{ if min_temperature < states(room_temperature) }}"
                    # User does not wish to heat due to expensive price
                    sequence:
                      - service: input_boolean.turn_on
                        target:
                          entity_id: >
                            {{ 'input_boolean.' + room_name | lower + '_delay_heat' }}
                  - conditions:
                      - condition: template
                        value_template: "{{ if min_temperature <= states(room_temperature) or min_temperature > states(room_temperature) }}"
                    # Heat bare minimum because user did not update minimum temperature level
                    sequence:
                      - service: input_boolean.turn_on
                        target:
                          entity_id: >
                            {{ 'input_boolean.' + room_name | lower + '_maintain_heat' }}




              - conditions:
                  - condition: template
                    value_template: "{{ if state_attr(nordpool, 'current_price') < current_year_average_price }}"
                sequence: 


      # Heat between min and max
      - conditions:
          - condition: template
            value_template: "{{ state_attr(pipeline_settings, 'block_2_case_3') == 'on' }}"
        sequence:
          # Define actions for this condition here


  # Debug: provide updated JSON 
               