# Name: financial_conditions.yaml
# Author: Sebastian Sopola @ https://www.linkedin.com/in/sebastiansopola/
# Description: This file containts the blueprint to provide logic to evaluate financial conditions



blueprint:
  name: Evaluate financial conditions
  description: Evaluate financial conditions. Output will be one of the following options; delay, preheat or agressive heat 
  domain: automation
  author: Sebastian Sopola @ https://www.linkedin.com/in/sebastiansopola/
  input:
    housekeep:
      name: House Keep Information
      icon: mdi:hoop-house
      description:  Inputs provide notifications services ot administrator
      input:
        user:
          name: Housekeeper's phone
          description: This user is administrator of heating system
          selector:
            entity:
              filter:
    price_treshold:
      name: Price threshold
      icon: mdi:currency-eur
      description: Set the maximum acceptable electricity price for heating in cents/kWh
      input:
        price_treshold:
          name: Price threshold to protect against high prices 
          description: Set price treshold to prevent over extravicant energy bills
          selector:
            entity:
              filter:
                domain: input_number
    financial_information:
      name: Financial Information
      icon: mdi:finance
      description: Inputs related to financial data and market price trends used for heating strategy decisions
      input:
        price_trend:
          name: Price Trend
          description: Entity representing the calculated price trend
          selector:
            entity:
              filter:
                domain: sensor
        current_year_average_price:
          name: Current year's average price
          description: Sensor that provides the current year's average electric stock market price
          selector:
            entity:
              filter:
                domain: sensor
        nordpool:
          name: Nordpool
          description: Sensor that represents real-time electric stock market price data
          selector: 
            entity: 
              filter: 
                domain: sensor
    room_information:
      name: Room information
      icon: mdi:database
      description: These inputs provide information to make financial and heating strategy decisions
      input:  
        room_name:
          name: Room Name
          description: The name of the room for which the process should be conducted
          selector:
            text:
        room_temperature:
          name: Room temperature sensor 
          selector:
            entity: 
              filter: 
                domain: sensor  
        min_temperature:
          name: Minimum allowed room temperature
          selector:
            entity:
              filter:
                domain: input_number
        max_temperature:
          name: Maximum allowed room temperature
          selector:
            entity:
              filter:
                domain: input_number
        coefficient:
          name: Heat transfer coefficient
          selector:
            entity:
              filter:
                domain: sensor
        outdoor_temperature:
          name: Outdoor temperature sensor
          selector:
            entity:
              filter:
                domain: sensor
        target_temperature:
          name: Set room target temperature
          selector:
            entity:
              filter:
                domain: input_number
        living_space:
          name: Set room size (m^2)
          selector:
            entity:
              filter:
                domain: input_number
        heating_schedule_start_time:
          name: Heating schedule start time
          selector:
            entity: 
              filter:
                domain: input_datetime
        heating_schedule_end_time:
            name: Heating schedule end time
            selector:
              entity: 
                filter:
                  domain: input_datetime
    pipeline_settings:
      name: Room Heating System Interface
      description: This is a sensor configured with sensor attributes to control heating system program flow
      selector:
        entity:
          domain: sensor


mode: restart
max_exceeded: silent

variables:
  user: !input user
  price_treshold: !input price_treshold
  price_trend: !input price_trend
  current_year_average_price: !input current_year_average_price
  nordpool: !input nordpool
  room_name: !input room_name
  room_temperature: !input room_temperature
  min_temperature: !input min_temperature
  max_temperature: !input max_temperature
  coefficient: !input coefficient
  outdoor_temperature: !input outdoor_temperature
  target_temperature: !input target_temperature
  living_space: !input living_space
  heating_schedule_start_time: !input heating_schedule_start_time
  heating_schedule_end_time: !input heating_schedule_end_time

trigger_variables:
  pipeline_settings: !input pipeline_settings

trigger:
  - platform: template
    value_template: >
      {% set case_1 = state_attr(pipeline_settings, 'block_2_case_1') %}
      {% set case_2 = state_attr(pipeline_settings, 'block_2_case_2') %}
      {% set case_3 = state_attr(pipeline_settings, 'block_2_case_3') %}

      {% if case_1 == 'on' or case_2 == 'on' or case_3 == 'on' %}
        true
      {% else %}
        false
      {% endif %}

action:

  - choose:
      # Heat is at max
      - conditions:
          - condition: template
            value_template: "{{ state_attr(pipeline_settings, 'block_2_case_1') == 'on' }}"
        sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: >
                {{ 'input_boolean.' + room_name | lower + '_delay_heat' }}

      # Heat at min or below
      - conditions:
          - condition: template
            value_template: "{{ state_attr(pipeline_settings, 'block_2_case_2') == 'on' }}"
        sequence:
          - choose:
              - conditions:
                  # Price is expensive and heating is necessary
                  - condition: template
                    value_template: "{{ state_attr(nordpool, 'current_price') | float > states(current_year_average_price) | float }}"
                sequence:
                  - service: notify.{{ user }}
                    data:
                      title: >
                        Huom! Korkea sähkön hinta
                      message: >
                        Hinta: {{ state_attr(nordpool, 'current_price') }} {{ state_attr(nordpool, 'unit_of_measurement') }}. 
                        Huone {{ room_name }} on {{ states(room_temperature) }}°C. 
                        Laske lämmitysrajaa? Nykyinen minimi: {{ states(min_temperature) }}°C. 
                        Reagoi 5 minuutin sisällä.
                  - delay: "00:05:00"  # 5 minutes
                  - choose:
                      - conditions:
                          # User updated minimum temperature
                          - condition: template
                            value_template: "{{ states(min_temperature) | float < states(room_temperature) | float }}"
                        sequence:
                          - service: input_boolean.turn_on
                            target:
                              entity_id: >
                                {{ 'input_boolean.' + room_name | lower + '_delay_heat' }}
                      - conditions:
                          # No user action, maintain heat at minimum
                          - condition: template
                            value_template: "{{ states(min_temperature) | float >= states(room_temperature) | float }}"
                        sequence:
                          - service: input_boolean.turn_on
                            target:
                              entity_id: >
                                {{ 'input_boolean.' + room_name | lower + '_maintain_heat' }}




              # Heat is needed and price is low
              - conditions:
                  - condition: template
                    value_template: "{{ state_attr(nordpool, 'current_price') < states(current_year_average_price) | float }}"
                sequence:
                  - variables: 
                      cost_ratio: >
                        {{ ((states(current_year_average_price) | float - state_attr(nordpool, 'current_price') | float) / states(current_year_average_price) | float) * 100 }}

                  - choose:
                      # Price is more than 20% cheaper
                      - conditions:
                          - condition: template
                            value_template: "{{ cost_ratio >= 20 }}"
                        sequence:
                          - service: input_boolean.turn_on
                            target:
                              entity_id: >
                                {{ 'input_boolean.' + room_name | lower + '_preheat_max' }}

                      # Price is between 12%  to 20% cheaper
                      - conditions:
                          - condition: template
                            value_template: "{{ cost_ratio >= 12 and cost_ratio <= 20 }}"
                        sequence:
                          - service: input_boolean.turn_on
                            target:
                              entity_id: >
                                {{ 'input_boolean.' + room_name | lower + '_preheat_by_12' }}

                      # Price is 5% or more but less than 12% cheaper
                      - conditions:
                          - condition: template
                            value_template: "{{ cost_ratio >= 5 and cost_ratio < 12 }}"
                        sequence:
                          - service: input_boolean.turn_on
                            target:
                              entity_id: >
                                {{ 'input_boolean.' + room_name | lower + '_preheat_by_5' }}

                      # Price is less than 5% cheaper, fallback to minimum heating
                      - conditions:
                          - condition: template
                            value_template: "{{ cost_ratio < 5 }}"
                        sequence:
                          - service: input_boolean.turn_on
                            target:
                              entity_id: >
                                {{ 'input_boolean.' + room_name | lower + '_maintain_heat' }}

              # Heat is needed and price is average
              - conditions:
                  - condition: template
                    value_template: "{{ state_attr(nordpool, 'current_price') == states(current_year_average_price) | float }}"
                sequence:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: >
                        {{ 'input_boolean.' + room_name | lower + '_maintain_heat' }}


      # Heat between min and max
      - conditions:
          - condition: template
            value_template: "{{ state_attr(pipeline_settings, 'block_2_case_3') == 'on' }}"
        sequence:
          - variables:
              price_trend: "{{ states(price_trend) }}"
              current_price: "{{ state_attr(nordpool, 'current_price') }}"
            
          # Check price  
          - choose:

              # Price category: expensive
              - conditions:
                  - condition: template
                    value_template: "{{ current_price > current_year_average_price }}"
                sequence:

                  # Trend category check: expensive
                  - conditions:
                      - condition: template
                        value_template: "{{ price_trend == 'increasing' }}"
                    sequence:
                      # Check for anomalies i.e. cheaper than current price inside the trend
                      - repeat:
                          count: 8
                          sequence:
                            - variables:
                                hour: "{{ ((now().hour + repeat.index) % 24) }}"
                                price: >              
                                  {% set hour_offset = (now().hour + repeat.index) %}
                                  {% if hour_offset < 24 %}
                                    {{ (state_attr(nordpool, 'today')[hour_offset]) | float }}  
                                  {% else %}
                                    {% if state_attr(nordpool, 'tomorrow_valid') %}
                                      {{ (state_attr(nordpool, 'tomorrow')[hour_offset - 24]) | float }}  
                                    {% else %}
                                      100
                                    {% endif %}
                                  {% endif %}
                            # Process the price
                            - choose:
                                - conditions:
                                    - condition: template
                                      value_template: "{{ price != 100.0 }}"  # Skip invalid prices
                                  sequence:
                                    - choose:
                                        - conditions:
                                            - condition: template
                                              value_template: "{{ price < state_attr(nordpool, 'current_price') | float }}"
                                          sequence:
                                            # Calculate heat transfer
                                            - variables:
                                                heat_loss: >
                                                  {{ (coefficient | float * living_space | float * (room_temperature | float - outdoor_temperature | float)) * (repeat.index+1) }}
                                                heat_requirement: >
                                                  {{ (coefficient | float * living_space | float * (target_temperature | float - room_temperature | float)) * (repeat.index+1) }}
                                                estimated_room_temperature: >
                                                  {{ room_temperature | float + (heat_requirement | float - heat_loss | float) / (coefficient | float * living_space | float) }}
                                            # Check if the room can hold until the next cheaper price
                                            - choose:
                                                - conditions:
                                                    - condition: template
                                                      value_template: "{{ estimated_room_temperature >= states(min_temperature) | float }}"
                                                  sequence:
                                                    # Wait for the cheap hour
                                                    - service: input_boolean.turn_on
                                                      target:
                                                        entity_id: >
                                                          {{ 'input_boolean.' + room_name | lower + '_delay_heat' }}
                                                - conditions:
                                                    - condition: template
                                                      value_template: "{{ estimated_room_temperature < states(min_temperature) | float }}"
                                                  sequence:    
                                                    # Check whether price is below set threshold
                                                    - choose:
                                                        # If price threshold value is invalid (100), delay automatically
                                                        - conditions:
                                                            - condition: template
                                                              value_template: "{{ states(price_threshold) | float == 100 }}"
                                                          sequence:
                                                            - service: input_boolean.turn_on
                                                              target:
                                                                entity_id: "{{ 'input_boolean.' + room_name | lower + '_delay_heat' }}"
                                                        
                                                        # If price threshold is valid, check if current price is below threshold
                                                        - conditions:
                                                            - condition: template
                                                              value_template: "{{ current_price < states(price_threshold) | float }}"
                                                          sequence:
                                                            # If price is below threshold, maintain heat
                                                            - service: input_boolean.turn_on
                                                              target:
                                                                entity_id: "{{ 'input_boolean.' + room_name | lower + '_maintain_heat' }}"

                                                        # If current price is above threshold, delay heating
                                                        - conditions:
                                                            - condition: template
                                                              value_template: "{{ current_price >= states(price_threshold) | float }}"
                                                          sequence:
                                                            - service: input_boolean.turn_on
                                                              target:
                                                                entity_id: "{{ 'input_boolean.' + room_name | lower + '_delay_heat' }}"


                  # Trend category check: average
                  - conditions:
                      - condition: template
                        value_template: "{{ price_trend == 'steady' }}"
                    sequence:

                  # Trend category check: cheap
                  - conditions:
                      - condition: template
                        value_template: "{{ price_trend == 'decreasing' }}"
                    sequence:

              # Price category: average
              - conditions:
                  - condition: template
                    value_template: "{{ current_price == current_year_average_price }}"
                sequence:
                                    # Trend category check: expensive
                  - conditions:
                      - condition: template
                        value_template: "{{ price_trend == 'increasing' }}"
                    sequence:

                  # Trend category check: average
                  - conditions:
                      - condition: template
                        value_template: "{{ price_trend == 'steady' }}"
                    sequence:

                  # Trend category check: cheap
                  - conditions:
                      - condition: template
                        value_template: "{{ price_trend == 'decreasing' }}"
                    sequence:
              
              # Price category: cheap
              - conditions:
                  - condition: template
                    value_template: "{{ current_price == current_year_average_price }}"
                sequence:
                                    # Trend category check: expensive
                  - conditions:
                      - condition: template
                        value_template: "{{ price_trend == 'increasing' }}"
                    sequence:

                  # Trend category check: average
                  - conditions:
                      - condition: template
                        value_template: "{{ price_trend == 'steady' }}"
                    sequence:

                  # Trend category check: cheap
                  - conditions:
                      - condition: template
                        value_template: "{{ price_trend == 'decreasing' }}"
                    sequence:

