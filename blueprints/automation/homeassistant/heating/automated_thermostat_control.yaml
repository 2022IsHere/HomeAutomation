# Name: control_thermostats.yaml
# Author: Sebastian Sopola @ https://www.linkedin.com/in/sebastiansopola/
# Description: This file containts the blueprint to provide functionality to perform heating actions



blueprint:
  name: Control thermostats
  description:  Provides automation functionality to control heating. Optimised heating based on electric stock market prices. 
  domain: automation
  author: Sebastian Sopola @ https://www.linkedin.com/in/sebastiansopola/
  input:    
    room_information:
      name: Room information
      icon: mdi:database
      description: These inputs provide relevant room information
      input:  
        room_name:
          name: Room Name
          description: The name of the room for which the process should be conducted
          selector:
            text:
        room_information:
          name: Room Information Sensor
          description: Sensor providing such as temperature, target temperature, living space, and heating schedule
          selector:
            entity:
              filter:
                domain: sensor
        room_heating_system_interface:
          name: Room Heating System Interface
          description: This is a sensor configured to control heating system program flow
          selector:
            entity:
              filter:
                domain: sensor

mode: restart
max_exceeded: silent

variables:
 room_name: !input room_name
 room_information: !input room_information

trigger_variables:
 room_heating_system_interface: !input room_heating_system_interface

trigger:
  - platform: template
    value_template: >
      {% set preheat_maximum = state_attr(room_heating_system_interface, 'preheat_max') %}
      {% set maintain_heat = state_attr(room_heating_system_interface, 'maintain_heat') %}
      {% set minimum_heat =  state_attr(room_heating_system_interface, 'minimum_heat') %}
      {% set delay_heat = state_attr(room_heating_system_interface, 'delay_heat') %}
      
      {% if preheat_naximum == 'on' or maintain_heat == 'on' or minimum_heat == 'on' or delay_heat == 'on' %}
        true
      {% else %}
        false
      {% endif %}

action:
  # ------------------
  # - INIT VARIABLES -
  # ------------------
  - variables:
      preheat_maximum: "{{ state_attr(room_heating_system_interface, 'preheat_max') == 'on' }}"
      maintain_heat: "{{ state_attr(room_heating_system_interface, 'maintain_heat') == 'on' }}"
      minimum_heat: "{{ state_attr(room_heating_system_interface, 'minimum_heat') == 'on' }}"
      delay_heat: "{{ state_attr(room_heating_system_interface, 'delay_heat') == 'on' }}"

      
      room_temperature: "{{ state_attr(room_information, 'room_temperature') | float }}"
      room_minimum_temperature: "{{ state_attr(room_information, 'room_minimum_temperature') | float }}"
      room_maximum_temperature: "{{ state_attr(room_information, 'room_maximum_temperature') | float }}"
      room_target_temperature: "{{ state_attr(room_information, 'room_target_temperature') | float }}"
      room_thermostat: "{{ state_attr(room_information, 'room_thermostat') }}"

  - choose:
    # ---------------------------
    # - Set thermostat: Preheat -
    # ---------------------------
    - conditions:
        - condition: template
          value_template: "{{ preheat_maximum }}"
      sequence:
        - service: climate.set_temperature
          data:
            entity_id: "{{ room_thermostat }}"
            temperature: "{{ room_maximum_temperature }}"    

    # ---------------------------
    # - Set thermostat: Maintain -
    # ---------------------------
    - conditions:
        - condition: template
          value_template: "{{ maintain_heat }}"
      sequence:
        - service: climate.set_temperature
          data:
            entity_id: "{{ room_thermostat }}"
            temperature: "{{ room_target_temperature }}"

    # ---------------------------
    # - Set thermostat: Minimum -
    # ---------------------------
    - conditions:
        - condition: template
          value_template: "{{ minimum_heat }}"
      sequence:
        - service: climate.set_temperature
          data:
            entity_id: "{{ room_thermostat }}"
            temperature: "{{ room_minimum_temperature }}"
    
    # -------------------------
    # - Set thermostat: Delay -
    # -------------------------
    - conditions:
        - condition: template
          value_template: "{{ delay_heat }}"
      sequence:
        - service: climate.set_temperature
          data:
            entity_id: "{{ room_thermostat }}"
            temperature: "{{ room_temperature - 1 }}"        