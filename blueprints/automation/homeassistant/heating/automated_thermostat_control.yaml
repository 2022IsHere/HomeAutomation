# Name: control_thermostats.yaml
# Author: Sebastian Sopola @ https://www.linkedin.com/in/sebastiansopola/
# Description: This file containts the blueprint to provide functionality to perform heating actions



blueprint:
  name: Control thermostats
  description:  Provides automation functionality to control heating. Optimised heating based on electric stock market prices. 
  domain: automation
  author: Sebastian Sopola @ https://www.linkedin.com/in/sebastiansopola/
  input:    
    room_information:
      name: Room information
      icon: mdi:database
      description: These inputs provide relevant room information
      input:  
        room_name:
          name: Room Name
          description: The name of the room for which the process should be conducted
          selector:
            text:
        room_information:
          name: Room Information Sensor
          description: Sensor providing such as temperature, target temperature, living space, and heating schedule
          selector:
            entity:
              filter:
                domain: sensor
        room_heating_system_interface:
          name: Room Heating System Interface
          description: This is a sensor configured to control heating system program flow
          selector:
            entity:
              filter:
                domain: sensor

mode: restart
max_exceeded: silent


variables:
  room_name: !input room_name
  room_information: !input room_information


# ---------------------------------------------------
# - Define all necessary variables to trigger scope -
# ---------------------------------------------------
trigger_variables:
  room_heating_system_interface: !input room_heating_system_interface

# ---------------------------------------------------------------
# - Check if any of the heating options are active -
# ---------------------------------------------------------------
trigger:
  - platform: template
    value_template: >
      {{ state_attr(room_heating_system_interface, 'heating_options')['preheat_maximum'] == 'on' or
         state_attr(room_heating_system_interface, 'heating_options')['maintain_heat'] == 'on' or
         state_attr(room_heating_system_interface, 'heating_options')['delay_heat'] == 'on' or
         state_attr(room_heating_system_interface, 'heating_options')['minimum_heat'] == 'on' }}
action:
  - service: system_log.write
    data:
      message: >
        Heating service automated thermostat control process has started.

  # ------------------
  # - INIT VARIABLES -
  # ------------------
  - variables:      
      room_temperature: "{{ state_attr(room_information, 'room_temperature') | float }}"
      room_minimum_temperature: "{{ state_attr(room_information, 'room_minimum_temperature') | float }}"
      room_maximum_temperature: "{{ state_attr(room_information, 'room_maximum_temperature') | float }}"
      room_target_temperature: "{{ state_attr(room_information, 'room_target_temperature') | float }}"
      room_thermostat: "{{ state_attr(room_information, 'room_thermostat') }}"

      preheat_maximum: "{{ state_attr(room_heating_system_interface, 'heating_options')['preheat_maximum'] == 'on' }}"
      maintain_heat: "{{ state_attr(room_heating_system_interface, 'heating_options')['maintain_heat'] == 'on' }}"
      delay_heat: "{{ state_attr(room_heating_system_interface, 'heating_options')['delay_heat'] == 'on' }}"
      minimum_heat: "{{ state_attr(room_heating_system_interface, 'heating_options')['minimum_heat'] == 'on' }}"


  - choose:
      # ---------------------------
      # - Set thermostat: Preheat -
      # ---------------------------
    - conditions:
        - condition: template
          value_template: "{{ preheat_maximum }}"
      sequence:
        - choose:
            # --------------------------------
            # - Control multiple thermostats - 
            # --------------------------------
          - conditions:
              - condition: template
                value_template: "{{ state_attr(room_information, 'room_thermostat') is mapping }}"
            sequence:
              - repeat:
                  for_each: "{{ state_attr(room_information, 'room_thermostat').values() | list }}"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: "{{ repeat.item }}" 
                        temperature: "{{ room_maximum_temperature }}"
                        hvac_mode: "heat"
          # -----------------------------
          # - Control single thermostat - 
          # -----------------------------
          - conditions:
              - condition: template 
                value_template: "{{ state_attr(room_information, 'room_thermostat') is not mapping }}"
            sequence:             
              - service: climate.set_temperature
                data:
                  entity_id: "{{ room_thermostat }}"
                  temperature: "{{ room_maximum_temperature }}"    
                  hvac_mode: "heat"
        # --------------
        # - Update log -
        # --------------
        - service: system_log.write
          data:
            message: >
              Setting thermostat(s) to maximum.
    # ----------------------------
    # - Set thermostat: Maintain -
    # ----------------------------
    - conditions:
        - condition: template
          value_template: "{{ maintain_heat }}"
      sequence:
        - choose:
            # --------------------------------
            # - Control multiple thermostats - 
            # --------------------------------
          - conditions:
              - condition: template
                value_template: "{{ state_attr(room_information, 'room_thermostat') is mapping }}"
            sequence:
              - repeat:
                  for_each: "{{ state_attr(room_information, 'room_thermostat').values() | list }}"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: "{{ repeat.item }}" 
                        temperature: "{{ room_target_temperature }}"
          # -----------------------------
          # - Control single thermostat - 
          # -----------------------------
          - conditions:
              - condition: template 
                value_template: "{{ state_attr(room_information, 'room_thermostat') is not mapping }}"
            sequence:             
              - service: climate.set_temperature
                data:
                  entity_id: "{{ room_thermostat }}"
                  temperature: "{{ room_target_temperature }}"
        # --------------
        # - Update log -
        # --------------
        - service: system_log.write
          data:
            message: >
              Setting thermostat(s) to target.
    # ---------------------------
    # - Set thermostat: Minimum -
    # ---------------------------
    - conditions:
        - condition: template
          value_template: "{{ minimum_heat }}"
      sequence:
        - choose:
            # --------------------------------
            # - Control multiple thermostats - 
            # --------------------------------
          - conditions:
              - condition: template
                value_template: "{{ state_attr(room_information, 'room_thermostat') is mapping }}"
            sequence:
              - repeat:
                  for_each: "{{ state_attr(room_information, 'room_thermostat').values() | list }}"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: "{{ repeat.item }}" 
                        temperature: "{{ room_minimum_temperature }}"
          # -----------------------------
          # - Control single thermostat - 
          # -----------------------------
          - conditions:
              - condition: template 
                value_template: "{{ state_attr(room_information, 'room_thermostat') is not mapping }}"
            sequence:             
              - service: climate.set_temperature
                data:
                  entity_id: "{{ room_thermostat }}"
                  temperature: "{{ room_minimum_temperature }}"
        # --------------
        # - Update log -
        # --------------
        - service: system_log.write
          data:
            message: >
              Setting thermostat(s) to minimum.
    # -------------------------
    # - Set thermostat: Delay -
    # -------------------------
    - conditions:
        - condition: template
          value_template: "{{ delay_heat }}"
      sequence:
        - choose:
            # --------------------------------
            # - Control multiple thermostats - 
            # --------------------------------
          - conditions:
              - condition: template
                value_template: "{{ state_attr(room_information, 'room_thermostat') is mapping }}"
            sequence:
              - repeat:
                  for_each: "{{ state_attr(room_information, 'room_thermostat').values() | list }}"
                  sequence:
                    - service: climate.set_hvac_mode
                      data:
                        entity_id: "{{ repeat.item }}"
                        hvac_mode: "off"
          # -----------------------------
          # - Control single thermostat - 
          # -----------------------------
          - conditions:
              - condition: template 
                value_template: "{{ state_attr(room_information, 'room_thermostat') is not mapping }}"
            sequence:             
              - service: climate.set_hvac_mode
                data:
                  entity_id: "{{ room_thermostat }}"
                  hvac_mode: "off"
        # --------------
        # - Update log -
        # --------------
        - service: system_log.write
          data:
            message: >
              Setting HVAC mode to off.
  # -----------------------------------
  # - Update heating system interface -
  # -----------------------------------
  - service: input_boolean.turn_on 
    target:
      entity_id: >
        {{ 'input_boolean.' + room_name | lower + '_control_thermostats' }}      
  # --------------
  # - Update log -
  # --------------
  - service: system_log.write
    data:
      message: >
        Heating service automated thermostat control process has finished.
  # --------------
  # - Update log -
  # --------------
  - service: system_log.write
    data:
      message: >
        Heating service has finished.