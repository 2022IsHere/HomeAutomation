- platform: template
  sensors:
    # Entity which updates itself based on the heating energy input number entity
    energy_consumption_heating:
      friendly_name: "Energy Consumption Heating"
      unique_id: energy_consumption_heating_sensor
      value_template: "{{ states('input_number.energy_consumption_heating') | int(0) }}"
      unit_of_measurement: "Wh"
 
    # Total Daily Energy
    total_daily_energy:
      friendly_name: "Total Daily Energy"
      unique_id: total_daily_energy
      value_template: "{{ states('input_number.total_daily_energy') | int(0) }}"
      unit_of_measurement: "Wh"

    # The AVG indoor temperature and humidity
    indoor_average_temperature_and_humidity:
      friendly_name: "Indoor Average Temperature and Humidity"
      unique_id: indoor_average_temperature_and_humidity
      value_template: >-
        {{
          (
            (
              states('sensor.living_room_temperature_and_humidity_sensor_temperature') | float(0) +
              states('sensor.kitchen_temperature_and_humidity_sensor_temperature') | float(0) +
              states('sensor.main_bedroom_temperature_and_humidity_sensor_temperature') | float(0) +
              states('sensor.bedroom_temperature_and_humisity_sensor_temperature') | float(0) +
              states('sensor.guest_bedroom_temperature_and_humidity_sensor_temperature') | float(0) +
              states('sensor.sauna_room_tempeature_and_humidity_sensor_temperature') | float(0)
            ) / 6
          ) | round(1)
        }}

    # Total energy used in the morning (06:00 - 12:00)
    morning_energy_usage:
      friendly_name: "Morning Energy Usage"
      unique_id: total_morning_energy_usage
      value_template: "{{ states('input_number.total_energy_usage_morning') | int(1) }}"

    # Total energy used in the afternoon (12:00 - 18:00)
    afternoon_energy_usage:
      friendly_name: "Afternoon Energy Usage"
      unique_id: total_afternoon_energy_usage
      value_template: "{{ states('input_number.total_energy_usage_afternoon') | int(1) }}"

    # Total energy used in the evening (18:00 - 24:00)
    evening_energy_usage:
      friendly_name: "Evening Energy Usage"
      unique_id: total_evening_energy_usage
      value_template: "{{ states('input_number.total_energy_usage_evening') | int(1) }}"

    # Total energy used in the night (00:00 - 06:00)
    night_energy_usage:
      friendly_name: "Night Energy Usage"
      unique_id: total_night_energy_usage
      value_template: "{{ states('input_number.total_energy_usage_night') | int(1) }}"

    # The percentage equivalent for morning energy
    morning_energy_usage_percentage:
      friendly_name: "Morning Energy Usage Percentage"
      unique_id: morning_energy_usage_percentage
      value_template: >-
        {% set total = states('input_number.total_daily_energy') | float %}
        {% if total > 0 %}
          {{ (states('sensor.morning_energy_usage') | float(0) / total * 100) | round(1) }}
        {% else %}
          0
        {% endif %}

    # The percentage equivalent for afternoon energy
    afternoon_energy_usage_percentage:
      friendly_name: "Afternoon Energy Usage Percentage"
      unique_id: afternoon_energy_usage_percentage
      value_template: >-
        {% set total = states('input_number.total_daily_energy') | float %}
        {% if total > 0 %}
          {{ (states('sensor.afternoon_energy_usage') | float(0) / total * 100) | round(1) }}
        {% else %}
          0
        {% endif %}

    # The percentage equivalent for evening energy
    evening_energy_usage_percentage:
      friendly_name: "Evening Energy Usage Percentage"
      unique_id: evening_energy_usage_percentage
      value_template: >-
        {% set total = states('input_number.total_daily_energy') | float %}
        {% if total > 0 %}
          {{ (states('sensor.evening_energy_usage') | float(0) / total * 100) | round(1) }}
        {% else %}
          0
        {% endif %}

    # The percentage equivalent for night energy
    night_energy_usage_percentage:
      friendly_name: "Night Energy Usage Percentage"
      unique_id: night_energy_usage_percentage
      value_template: >-
        {% set total = states('input_number.total_daily_energy') | float %}
        {% if total > 0 %}
          {{ (states('sensor.night_energy_usage') | float(0) / total * 100) | round(1) }}
        {% else %}
          0
        {% endif %}

    # Total Energy used for Hot Water
    total_energy_use_hot_water:
      friendly_name: "Total Energy Use Hot Water"
      unique_id: total_energy_use_hot_water
      value_template: "{{ states('input_number.total_energy_usage_hot_water') }}"

    # Total Energy used for Lighting
    total_energy_use_lighting:
      friendly_name: "Total Energy Use Lighting"
      unique_id: total_energy_use_lighting
      value_template: "{{ states('input_number.total_energy_usage_lighting') }}"

    # Total Energy used for Others
    total_energy_use_others:
      friendly_name: "Total Energy Use Others"
      unique_id: total_energy_use_others
      value_template: "{{ states('input_number.total_energy_usage_others') }}"
